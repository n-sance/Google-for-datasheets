{"ast":null,"code":"var _jsxFileName = \"/Users/admin/yandex-cloud/face_upload/pdf-search-service/web-interface/src/upload/Upload.js\";\nimport React, { Component } from \"react\";\nimport Dropzone from \"../dropzone/Dropzone\";\nimport \"./Upload.css\";\nimport Progress from \"../progress/Progress\";\nimport axios from \"axios\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: [],\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false\n    };\n    this.onFilesAdded = this.onFilesAdded.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n    this.renderActions = this.renderActions.bind(this);\n  }\n\n  onFilesAdded(files) {\n    this.setState(prevState => ({\n      files: prevState.files.concat(files)\n    }));\n  }\n\n  async uploadFiles() {\n    this.setState({\n      uploadProgress: {},\n      uploading: true\n    });\n    const promises = [];\n    this.state.files.forEach(file => {\n      promises.push(this.sendRequest(file));\n    });\n\n    try {\n      await Promise.all(promises);\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    } catch (e) {\n      // Not Production ready! Do some error handling here instead...\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    }\n  }\n\n  sendRequest(file) {\n    return new Promise((resolve, reject) => {\n      // const req = new XMLHttpRequest();\n      // req.upload.addEventListener(\"progress\", (event) => {\n      //   if (event.lengthComputable) {\n      //     const copy = { ...this.state.uploadProgress };\n      //     copy[file.name] = {\n      //       state: \"pending\",\n      //       percentage: (event.loaded / event.total) * 100,\n      //     };\n      //     this.setState({ uploadProgress: copy });\n      //   }\n      // });\n      // req.upload.addEventListener(\"load\", (event) => {\n      //   const copy = { ...this.state.uploadProgress };\n      //   copy[file.name] = { state: \"done\", percentage: 100 };\n      //   this.setState({ uploadProgress: copy });\n      //   resolve(req.response);\n      // });\n      // req.upload.addEventListener(\"error\", (event) => {\n      //   const copy = { ...this.state.uploadProgress };\n      //   copy[file.name] = { state: \"error\", percentage: 0 };\n      //   this.setState({ uploadProgress: copy });\n      //   reject(req.response);\n      // });\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"name\", \"naaaaaame\");\n      axios({\n        url: \"http://127.0.0.1:5051/upload\",\n        method: \"POST\",\n        data: formData\n      }).then(function (response) {\n        resolve(response);\n      });\n    });\n  }\n\n  renderProgress(file) {\n    const uploadProgress = this.state.uploadProgress[file.name];\n\n    if (this.state.uploading || this.state.successfullUploaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ProgressWrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Progress, {\n        progress: uploadProgress ? uploadProgress.percentage : 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"CheckIcon\",\n        alt: \"done\",\n        src: \"2521683.svg\",\n        style: {\n          opacity: uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n\n  renderActions() {\n    if (this.state.successfullUploaded) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.setState({\n          files: [],\n          successfullUploaded: false\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }, \"Clear\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        disabled: this.state.files.length < 0 || this.state.uploading,\n        onClick: this.uploadFiles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }\n      }, \"Upload\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Upload\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, \"Upload your datasheet and fill searching words\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Dropzone, {\n      onFilesAdded: this.onFilesAdded,\n      disabled: this.state.uploading || this.state.successfullUploaded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Files\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, this.state.files.map(file => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: file.name,\n        className: \"Row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"Filename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 19\n        }\n      }, file.name), this.renderProgress(file));\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, this.renderActions()));\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["/Users/admin/yandex-cloud/face_upload/pdf-search-service/web-interface/src/upload/Upload.js"],"names":["React","Component","Dropzone","Progress","axios","Upload","constructor","props","state","files","uploading","uploadProgress","successfullUploaded","onFilesAdded","bind","uploadFiles","sendRequest","renderActions","setState","prevState","concat","promises","forEach","file","push","Promise","all","e","resolve","reject","formData","FormData","append","url","method","data","then","response","renderProgress","name","percentage","opacity","length","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Dropzone from \"../dropzone/Dropzone\";\r\nimport \"./Upload.css\";\r\nimport Progress from \"../progress/Progress\";\r\nimport axios from \"axios\";\r\n\r\nclass Upload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      files: [],\r\n      uploading: false,\r\n      uploadProgress: {},\r\n      successfullUploaded: false,\r\n    };\r\n\r\n    this.onFilesAdded = this.onFilesAdded.bind(this);\r\n    this.uploadFiles = this.uploadFiles.bind(this);\r\n    this.sendRequest = this.sendRequest.bind(this);\r\n    this.renderActions = this.renderActions.bind(this);\r\n  }\r\n\r\n  onFilesAdded(files) {\r\n    this.setState((prevState) => ({\r\n      files: prevState.files.concat(files),\r\n    }));\r\n  }\r\n\r\n  async uploadFiles() {\r\n    this.setState({ uploadProgress: {}, uploading: true });\r\n    const promises = [];\r\n    this.state.files.forEach((file) => {\r\n      promises.push(this.sendRequest(file));\r\n    });\r\n    try {\r\n      await Promise.all(promises);\r\n\r\n      this.setState({ successfullUploaded: true, uploading: false });\r\n    } catch (e) {\r\n      // Not Production ready! Do some error handling here instead...\r\n      this.setState({ successfullUploaded: true, uploading: false });\r\n    }\r\n  }\r\n\r\n  sendRequest(file) {\r\n    return new Promise((resolve, reject) => {\r\n      // const req = new XMLHttpRequest();\r\n\r\n      // req.upload.addEventListener(\"progress\", (event) => {\r\n      //   if (event.lengthComputable) {\r\n      //     const copy = { ...this.state.uploadProgress };\r\n      //     copy[file.name] = {\r\n      //       state: \"pending\",\r\n      //       percentage: (event.loaded / event.total) * 100,\r\n      //     };\r\n      //     this.setState({ uploadProgress: copy });\r\n      //   }\r\n      // });\r\n\r\n      // req.upload.addEventListener(\"load\", (event) => {\r\n      //   const copy = { ...this.state.uploadProgress };\r\n      //   copy[file.name] = { state: \"done\", percentage: 100 };\r\n      //   this.setState({ uploadProgress: copy });\r\n      //   resolve(req.response);\r\n      // });\r\n\r\n      // req.upload.addEventListener(\"error\", (event) => {\r\n      //   const copy = { ...this.state.uploadProgress };\r\n      //   copy[file.name] = { state: \"error\", percentage: 0 };\r\n      //   this.setState({ uploadProgress: copy });\r\n      //   reject(req.response);\r\n      // });\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      formData.append(\"name\", \"naaaaaame\");\r\n      axios({\r\n        url: \"http://127.0.0.1:5051/upload\",\r\n        method: \"POST\",\r\n        data: formData,\r\n      }).then(function (response) {\r\n        resolve(response);\r\n      });\r\n    });\r\n  }\r\n\r\n  renderProgress(file) {\r\n    const uploadProgress = this.state.uploadProgress[file.name];\r\n    if (this.state.uploading || this.state.successfullUploaded) {\r\n      return (\r\n        <div className=\"ProgressWrapper\">\r\n          <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />\r\n          <img\r\n            className=\"CheckIcon\"\r\n            alt=\"done\"\r\n            src=\"2521683.svg\"\r\n            style={{\r\n              opacity:\r\n                uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0,\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderActions() {\r\n    if (this.state.successfullUploaded) {\r\n      return (\r\n        <button\r\n          onClick={() =>\r\n            this.setState({ files: [], successfullUploaded: false })\r\n          }\r\n        >\r\n          Clear\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <button\r\n          disabled={this.state.files.length < 0 || this.state.uploading}\r\n          onClick={this.uploadFiles}\r\n        >\r\n          Upload\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Upload\">\r\n        <span className=\"Title\">\r\n          Upload your datasheet and fill searching words\r\n        </span>\r\n        <div className=\"Content\">\r\n          <div>\r\n            <Dropzone\r\n              onFilesAdded={this.onFilesAdded}\r\n              disabled={this.state.uploading || this.state.successfullUploaded}\r\n            />\r\n          </div>\r\n          <div className=\"Files\">\r\n            {this.state.files.map((file) => {\r\n              return (\r\n                <div key={file.name} className=\"Row\">\r\n                  <span className=\"Filename\">{file.name}</span>\r\n                  {this.renderProgress(file)}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"Actions\">{this.renderActions()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Upload;\r\n"]},"metadata":{},"sourceType":"module"}